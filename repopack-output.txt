This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-28T19:05:02.042Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  favicon.svg
src/
  components/
    ArticleCard.astro
    Comment.astro
    CommentForm.astro
    Footer.astro
    MostRecentArticle.astro
    Navbar.astro
    SearchForm.astro
    Tags.astro
    Testimonials.astro
  content/
    config.ts
  layouts/
    main.astro
  lib/
    supabase.ts
  pages/
    api/
      auth/
        register.ts
        signin.ts
        signout.ts
      comment.ts
    articles/
      tags/
        [...tag].astro
      [...slug].astro
      index.astro
      search.astro
    404.astro
    about.astro
    index.astro
    register.astro
    signin.astro
  constants.ts
  env.d.ts
  utils.ts
.gitignore
astro.config.mjs
package.json
README.md
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>

================
File: src/components/ArticleCard.astro
================
---
import type { ArticleX } from '../utils';
import { formatDate } from '../utils'
import Tags from '../components/Tags.astro'

const { article } = Astro.props

interface Props {
  article: ArticleX
}
---

<div class="max-w-sm mx-auto mt-8">
  <div class="bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 ease-in-out transform hover:-translate-y-1">
    <a href={"/articles/" + article?.slug} class="block relative">
      <div class="relative overflow-hidden">
        <img
          src={article?.imageUrl}
          alt="Article Image"
          class="w-full h-64 object-cover transition duration-300 ease-in-out transform hover:scale-110"
        />
        <div class="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-black opacity-70"></div>
        <div class="absolute bottom-0 left-0 right-0 p-4">
          <h2 class="text-xl font-bold text-white mb-2 line-clamp-2">
            {article?.title}
          </h2>
        </div>
      </div>
    </a>
    <div class="p-6">
      <div class="flex justify-between items-center mb-4">
        <p class="text-gray-600 text-sm">
          {formatDate(article?.pubDate)}
        </p>
        <div class="flex items-center">
          <svg class="w-4 h-4 text-gray-400 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span class="text-gray-600 text-sm">5 min read</span>
        </div>
      </div>
      <div class="mb-4">
        <Tags tags={article.tags} />
      </div>
      <p class="text-gray-600 mb-4 line-clamp-3">
        {article?.excerpt || "Click to read more about this exciting article!"}
      </p>
      <a 
        href={"/articles/" + article?.slug}
        class="inline-block bg-indigo-600 text-white px-4 py-2 rounded-full text-sm font-semibold hover:bg-indigo-700 transition duration-300 ease-in-out"
      >
        Read More
      </a>
    </div>
  </div>
</div>

================
File: src/components/Comment.astro
================
---
import {supabase} from '../lib/supabase'
const {comment} = Astro.props

---

<div class="bg-gray-100 p-4 rounded-lg shadow-sm mb-4 mt-2">
    <p class="font-semibold text-gray-800 mb-1">{comment.username}</p>
    <p class="text-gray-600">{comment.text}</p>
  </div>

================
File: src/components/CommentForm.astro
================
---
const {user,post} = Astro.props;

---

<form id="comment-form" class="flex items-center space-x-4 max-w-3xl mx-auto my-8" action="/api/comment" method="POST">
    <div class="relative flex-grow">
      <input
        type="text"
        id="text"
        name="text"
        class="w-full px-4 py-3 bg-gray-100 border-2 border-transparent rounded-full focus:outline-none focus:border-indigo-500 transition duration-300 ease-in-out placeholder-gray-400 text-gray-700"
        placeholder="Share your thoughts..."
        required
      />
      <span class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
        </svg>
      </span>
    </div>
    
    {user != undefined ? (<input type="hidden" name="user_id" value={user.id} />) : null}
    <input type="hidden" name="post_id" value={post.id}/>
    <input type="hidden" name="slug" value={post.slug}/>
    
    <button
      type="submit"
      class="px-6 py-3 bg-indigo-600 text-white font-semibold rounded-full hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105"
    >
      Post
    </button>
  </form>

================
File: src/components/Footer.astro
================
---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { getArticles, type ArticleX } from "../utils";

const allBlogCollections : ArticleX[] = (await getArticles())
.sort((a : ArticleX, b : ArticleX) => b.pubDate.valueOf()-a.pubDate.valueOf()
)

let tagCollection : string[] = [];
allBlogCollections.map(article => article.tags.map(tag => tagCollection.push(tag)))
let tagSet = new Set(tagCollection);
tagCollection = Array.from(tagSet)
console.log(tagSet.size)
---

<footer class="bg-indigo-900 text-white">
    <div class="container mx-auto mt-10 max-w-screen-xl px-8">
      <div class="grid grid-cols-1 gap-12 sm:grid-cols-2 lg:grid-cols-4">
        <div class="mt-10">
          <h3 class="text-xl font-semibold mb-4">About</h3>
          <p class="text-white text-sm">
            TechPeople is a blog for tech enthusiasts. We publish articles,
            stories and tutorials about the latest technology trends and
            advancements.
          </p>
        </div>
        <div class="mt-10">
          <h3 class="text-xl font-semibold mb-4">Categories</h3>
          <ul class="text-white text-sm">
            {tagCollection.map(tag => (
              <li class="mb-2">
                <a href={"/articles/tags/"+tag}>{tag}</a>
              </li>
            ))}
          </ul>
        </div>
        <div class="mt-10">
          <h3 class="text-xl font-semibold mb-4">Contact</h3>
          <ul class="text-white text-sm">
            <li class="mb-2">
              <a href="#">Email</a>
            </li>
            <li class="mb-2">
              <a href="#">Twitter</a>
            </li>
            <li class="mb-2">
              <a href="#">Facebook</a>
            </li>
            <li class="mb-2">
              <a href="#">Instagram</a>
            </li>
          </ul>
        </div>
  </footer>

================
File: src/components/MostRecentArticle.astro
================
---
import type { CollectionConfig } from "astro:content";
import {formatDate, type ArticleX} from "../utils"
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";

const {article} = Astro.props

interface Props {
    article: ArticleX
}
---

<div class="relative inline-block w-full sm:w-auto cursor-pointer rounded">
    <a href={"/articles/"+article.slug}>
      <img
      src={article?.imageUrl}
      alt="Article Image"
      class="w-full h-48 hover:opacity-75 transition duration-300 ease-in-out"
    />
    <div
      class="absolute inset-0 flex flex-col items-center justify-center bg-black opacity-80 hover:opacity-75 transition duration-300 ease-in-out text-white text-center rounded-2xl"
    >
      <div>
        <h2 class="text-2xl font-semibold sm:text-3xl">
            {article.title}
        </h2>
        <p class="text-xl mt-4">{formatDate(article.pubDate)}</p>

        <!-- Tags with rounded border -->
        <div class="flex mt-4 justify-center">
          {article.tags.map(tag => (
            <span
            class="px-2 py-1 border text-white rounded-full text-xs mr-2"
            >{tag}</span>
          ))}
        </div>
      </div>
    </div>
    </a>
</div>

================
File: src/components/Navbar.astro
================
---
import { Image } from "astro:assets";
import logo from "../images/logo.jpeg";
---

<nav class="bg-white shadow-lg">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex items-center">
        <a href="/" class="flex-shrink-0 flex items-center">
          <Image src={logo} class="h-8 w-8 rounded-full" alt="YaBlog Logo" width={32} height={32} />
          <span class="text-xl font-semibold text-gray-800 ml-2">YaBlog</span>
        </a>
        <div class="hidden md:ml-6 md:flex md:space-x-8">
          <a href="/" class="inline-flex items-center px-1 pt-1 border-b-2 border-indigo-500 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out">
            Home
          </a>
          <a href="/articles" class="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out">
            Articles
          </a>
          <a href="/about" class="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out">
            About
          </a>
        </div>
      </div>
      <div class="flex items-center">
        <a href="/api/auth/signout" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Sign Out
        </a>
      </div>
    </div>
  </div>
</nav>

<script>
  const path = window.location.pathname;
  const links = document.querySelectorAll('nav a');
  links.forEach(link => {
    if (link.getAttribute('href') === path) {
      link.classList.remove('text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
      link.classList.add('border-indigo-500', 'text-gray-900');
    }
  });
</script>

================
File: src/components/SearchForm.astro
================
<form id="search-form" class="flex items-center" action="/articles/search">
    <label for="search-input" class="sr-only">Search</label>
    <div class="relative w-full">            
      <input
        type="text"
        id="query"
        name="query"
        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5"
        placeholder="Search articles..."
        required
      />
    </div>
    <button
      type="submit"
      class="p-2.5 ms-2 text-sm font-medium text-white bg-indigo-700 rounded-lg border border-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:outline-none focus:ring-indigo-300"
    >
      <svg
        class="w-4 h-4"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 20 20"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
        />
      </svg>
      <span class="sr-only">Search</span>
    </button>
  </form>
</div>

================
File: src/components/Tags.astro
================
---
import type { ActionError } from 'astro:actions'

import { getActionProps } from 'astro:actions'

const {tags} = Astro.props
import {capitalize} from "../utils";

interface Props{
    tags: string[]
}
---

<div class="flex flex-wrap gap-2">
    {tags.map((tag : string,index : number) => (
      <span
    class={index % 2 == 0 ?"px-2 py-1 bg-blue-500 text-white rounded-full text-xs hover:opacity-90" 
    : "px-2 py-1 bg-red-500 text-white rounded-full text-xs hover:opacity-90"}>
      <a href={"/articles/tags/"+tag}>#{capitalize(tag)}</a>
      </span>
    )
    )}
</div>

================
File: src/components/Testimonials.astro
================
---
import { Image } from "astro:assets";
import doctorImage from "../images/doctor_image.jpeg";
import { TESTIMONIAL } from "../constants";
---

<section class="bg-gray-100 py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-3xl mx-auto">
    <h2 class="text-3xl font-extrabold text-gray-900 text-center mb-8">
      What Our Users Say
    </h2>
    <div class="bg-white shadow-xl rounded-lg overflow-hidden">
      <div class="px-6 py-8 sm:p-10 sm:pb-6">
        <div class="flex items-center justify-center">
          <Image
            src={doctorImage}
            class="h-20 w-20 rounded-full border-4 border-indigo-200"
            alt="Gregory House"
            width={80}
            height={80}
          />
        </div>
        <div class="mt-6 text-center">
          <blockquote>
            <p class="text-xl font-medium text-gray-900 leading-relaxed">
              "{TESTIMONIAL}"
            </p>
          </blockquote>
          <div class="mt-6">
            <p class="text-base font-semibold text-indigo-600">Gregory House</p>
            <p class="text-base text-gray-500">HOD, Diagnostics</p>
          </div>
        </div>
      </div>
      <div class="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-between">
        <span class="text-sm font-medium text-gray-500">Featured Testimonial</span>
        <a href="#" class="text-sm font-medium text-indigo-600 hover:text-indigo-500 transition duration-150 ease-in-out">
          Read more testimonials &rarr;
        </a>
      </div>
    </div>
  </div>
</section>

================
File: src/content/config.ts
================
import { defineCollection,z } from "astro:content";

const blogCollection = defineCollection({
    type:'content',
    schema: z.object({
        title: z.string(),
        pubDate: z.date(),
        author: z.string(),
        image: z.string(),
        tags: z.array(z.string())
    })
})

export const collections = {
    blog: blogCollection,
}

================
File: src/layouts/main.astro
================
---
import { SITE_TITLE, SITE_DESCRIPTION } from "../constants";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";

const { title = "Welcome to YaBlog" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="h-full bg-gray-100">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={SITE_DESCRIPTION} />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <title>{SITE_TITLE} - {title}</title>
  </head>
  <body class="h-full">
    <div class="min-h-full">
      <Navbar />
      <main>
        <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <slot />
        </div>
      </main>
      <Footer />
    </div>
  </body>
</html>

================
File: src/lib/supabase.ts
================
import { createClient } from "@supabase/supabase-js";
import 'dotenv/config'

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_KEY

if(supabaseUrl == undefined){
    throw new Error("supabaseUrl undefined");
}

if(supabaseKey == undefined){
    throw new Error("supabase Key undefined")
}

export const supabase = createClient(
  supabaseUrl,
  supabaseKey
);

================
File: src/pages/api/auth/register.ts
================
import type { APIRoute } from "astro";
import {supabase} from '../../../lib/supabase'

export const POST : APIRoute = async({request,redirect}) => {
    const formData = await request.formData();
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();

    if (!email || !password) {
        return new Response("Email and password are required", { status: 400 });
      }
    
      const { error } = await supabase.auth.signUp({
        email,
        password,
      });
    
      if (error) {
        return new Response(error.message, { status: 500 });
      }
    
      return redirect("/signin");
}

================
File: src/pages/api/auth/signin.ts
================
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const POST: APIRoute = async ({ request, cookies, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }

  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;
  cookies.set("sb-access-token", access_token, {
    path: "/",
  });
  cookies.set("sb-refresh-token", refresh_token, {
    path: "/",
  });
  return redirect("/");
};

================
File: src/pages/api/auth/signout.ts
================
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const GET: APIRoute = async ({ cookies, redirect }) => {

  const { error } = await supabase.auth.signOut()
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
  return redirect("/signin");
};

================
File: src/pages/api/comment.ts
================
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";
export const POST: APIRoute = async ({ request,redirect }) => {
    
    const { data: { user }, error: err } = await supabase.auth.getUser()

    if(err){
        throw new Error(err.toString())
    }
    console.log(user)
    if(user == undefined){
        return redirect("/signin")
    }
    const formData = await request.formData();
    const comment = formData.get("text");
    const userId = formData.get("user_id")
    const postId = formData.get("post_id")
    const slug = formData.get("slug")
    // Do something with the data, then return a success response
    
    const { data, error } = await supabase.from('comments').insert(
        [{ user_id: userId, post_id: postId, text: comment, username: user.email?.split('@')[0]}]).select()

    if(error){
        throw new Error(error.toString())
    }

    return redirect("/articles/"+slug);
};

================
File: src/pages/articles/tags/[...tag].astro
================
---
import MainLayout from '../../../layouts/main.astro'
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import type { ArticleX } from '../../../utils';
import {formatDate,getArticles} from "../../../utils"
import ArticleCard from '../../../components/ArticleCard.astro';
const allBlogArticles: ArticleX[] = (await getArticles())
                                                      
const {tag} = Astro.params

if(tag === undefined){
    throw new Error("tag not found")
}

const tagArticles = allBlogArticles.filter(article => article.tags.includes(tag))
---

<MainLayout>
    <h1 class="text-2xl pb-3">{tag}</h1>
    <a href="/articles" class="inline-block bg-gray-100 p-2 mb-6 hover:bg-indigo-500 hover:text-white">Back To Articles</a>
      <!-- Main Grid -->
      <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {tagArticles.map(article => 
          <ArticleCard article={article}/>
          )}
      </div>
</MainLayout>

================
File: src/pages/articles/[...slug].astro
================
---
import MainLayout from "../../layouts/main.astro"
import Comment from '../../components/Comment.astro'
import CommentForm from "../../components/CommentForm.astro";
import { formatDate, getArticles } from "../../utils";
import Tags from "../../components/Tags.astro";
import { supabase } from "../../lib/supabase";
import { componentIsHTMLElement } from "astro/runtime/server/render/dom.js";

const {slug} = Astro.params

if(slug === undefined){
    throw new Error("Not found");
}

const entries = await getArticles();

const entry = entries.find(entry => entry.slug == slug);

if(entry === undefined){
    return Astro.redirect('/404')
}


let { data: comments } = await supabase
  .from('comments')
  .select('*')


let postComments = comments?.filter(comment => comment.post_id == entry.id)

const { data: { user } } = await supabase.auth.getUser()
          
// ----static website-------

// export async function  getStaticPaths() {
//     const allBlogArticles: CollectionEntry<'blog'>[] = await getCollection('blog')
//     return allBlogArticles.map(entry => ({
//         params:{
//             slug: entry.slug
//         },
//         props: {entry}
//     }))
// }

// const {entry} = Astro.props

---
<MainLayout>
    <h1>{entry.title}</h1>
    <a href="/articles" class="inline-block bg-gray-100 p-2 mb-6 hover:bg-indigo-500 hover:text-white">Back To Articles</a>
    <article>
        <h1 class="text-4xl font-bold mb-2"> {entry.title}</h1>
        <h3 class="text-lg mb-2">Written by {entry.author} on  {formatDate(entry.pubDate)}}</h3>
        <Tags tags={entry.tags}/>
        <img src={entry.imageUrl} alt="Article Image" class="w-full h-auto rounded-xl mb-6" />
        <div set:html={entry.html}/>
    </article>
    {user ? (
        <div class="mt-8">
          <h3 class="text-xl font-semibold mb-4">Leave a Comment</h3>
          <CommentForm post={entry} user={user} />
        </div>
      ) : (
        <div class="mt-8 bg-gray-100 border border-gray-200 rounded-lg p-6 text-center">
          <h3 class="text-xl font-semibold mb-2">Join the Discussion</h3>
          <p class="text-gray-600 mb-4">Sign in to leave a comment</p>
          <a
            href="/signin"
            class="inline-block px-6 py-2 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition duration-300 ease-in-out"
          >
            Sign In
          </a>
        </div>
      )}
    
    {postComments?.map(comment => (
        <Comment comment={comment}/>
    ))}
    
</MainLayout>

<style is:global>
    p{
        margin: 20px 0px;
    }
</style>

================
File: src/pages/articles/index.astro
================
---
import MainLayout from '../../layouts/main.astro'
import ArticleCard from '../../components/ArticleCard.astro';
import {formatDate,getArticles} from "../../utils"
import { supabase } from "../../lib/supabase";

const articles = await getArticles();
---

<MainLayout>
    <h1 class="text-2xl pb-3">All Articles</h1>
      <!-- Main Grid -->
      <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {articles.map(article => 
          <ArticleCard article={article}/>
          )}
      </div>
      
        <!-- Pagination -->
        <div class="flex justify-between mt-10">
          <a href="#" class="inline-block bg-indigo-100 px-3 py-2 hover:bg-indigo-600 hover:text-white rounded-lg">
            Previous
          </a>
          <a href="#"
           class="inline-block bg-indigo-100 px-3 py-2 hover:bg-indigo-600 hover:text-white rounded-lg">
            Next
          </a>
        </div>
</MainLayout>

================
File: src/pages/articles/search.astro
================
---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/main.astro'
import { getArticles } from '../../utils';
import type { CollectionEntry } from 'astro:content';
import ArticleCard from '../../components/ArticleCard.astro';
import SearchForm from '../../components/SearchForm.astro';
import { supabase } from "../../lib/supabase";

const allBlogArticles = await getArticles();

const  query = Astro.url.searchParams.get('query');

const searchArticles = allBlogArticles.filter((article) => {
    let bodyMatch : boolean = article.html.toLowerCase().includes(query!.toLowerCase())

    let titleMatch : boolean = article.title.toLowerCase().includes(query!.toLowerCase());

    let slugMatch : boolean = article.slug.toLowerCase().includes(query!.toLowerCase());

    return bodyMatch || titleMatch || slugMatch
})
---

<MainLayout>
    <SearchForm/>
    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {searchArticles.map(article => 
          <ArticleCard article={article}/>
          )}
      </div>
</MainLayout>

================
File: src/pages/404.astro
================
---
import MainLayout from "../layouts/main.astro";
import { Image } from "astro:assets";
import error from "../images/error-404.png";
---

<MainLayout title="404 page not found">
    <div class="flex flex-col items-center justify-items-center gap-7"> 
        <Image src={error} alt="404" height={250} width={250} class="mt-10"/>
        <h1 class="text-5xl">Page not found</h1>
    </div>
</MainLayout>

================
File: src/pages/about.astro
================
---
import MainLayout from '../layouts/main.astro'
import { Image } from 'astro:assets';
import about from '../images/about.jpg'
import team1 from '../images/team1.png'
import team2 from '../images/team2.png'
import team3 from '../images/team3.png'
---
<MainLayout title="YaBlog">
    <h1 class="text-4xl font-bold mb-5"> About TechPeople</h1>
      <div class="flex flex-col md:flex-row items-center justify-between gap-6">
        <div class="w-full md:w-1/2 mb-8 md:mb-0">
            <Image src={about} alt="Tech People Team" class="w-full h-auto rounded-lg shadow-lg"/>
        </div>
        <div class="w-full md:w-1/2">
            <h2 class="text-3xl font-extrabold text-gray-900 mb-4">
                Who We Are
            </h2>
            <p class="text-gray-700 leading-relaxed mb-6">
                We are Tech People, a passionate team of tech enthusiasts dedicated to bringing you the latest news, articles, and tutorials on all things technology.
            </p>
            <p class="text-gray-700 leading-relaxed mb-6">
                Our mission is to empower and educate our readers, helping them stay up-to-date with the rapidly evolving world of technology. Whether you're a seasoned developer, a gadget enthusiast, or just curious about the latest tech trends, we've got you covered.
            </p>
           
        </div>
    </div>
    
    <!-- Team -->
    <div class="mt-10">
      <h2 class="text-3xl font-extrabold text-gray-900 mb-8">
        Our Team
      </h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8">
        <div class="bg-white shadow-lg rounded-lg overflow-hidden">
            <Image src={team1} alt="Team Member 1" class="w-full h-auto"/>
            <div class="p-6">
                <h3 class="text-xl font-semibold text-gray-900 mb-2">John Doe</h3>
                <p class="text-gray-70">Founder & Editor-in-Chief</p>
            </div>
        </div>
        <div class="bg-white shadow-lg rounded-lg overflow-hidden">
            <Image src={team2} alt="Team Member 2" class="w-full h-auto"/>
            <div class="p-6">
                <h3 class="text-xl font-semibold text-gray-900 mb-2">Paul Newman</h3>
                <p class="text-gray-70">Lead Writer</p>
            </div>
        </div>
        <div class="bg-white shadow-lg rounded-lg overflow-hidden">
            <Image src={team3} alt="Team Member 3" class="w-full h-auto"/>
            <div class="p-6">
                <h3 class="text-xl font-semibold text-gray-900 mb-2">Johanna Johnson</h3>
                <p class="text-gray-70">Tech Analyst</p>
            </div>
        </div>
      </div>
    </div>
</MainLayout>

================
File: src/pages/index.astro
================
---
import MainLayout from '../layouts/main.astro'
import SearchForm from '../components/SearchForm.astro'
import MostRecentArticle from '../components/MostRecentArticle.astro';
import { HOMEPAGE_ARTICLE_LIMIT } from '../constants';
import {formatDate, type ArticleX} from '../utils'
import Tags from "../components/Tags.astro"
import {getArticles} from '../utils.ts'
import Testimonials from '../components/Testimonials.astro';

const allBlogCollections : ArticleX[] = (await getArticles())
.sort((a : ArticleX, b : ArticleX) => b.pubDate.valueOf()-a.pubDate.valueOf()
)

const mostRecentArticle :ArticleX = allBlogCollections[0]

const otherArticles : ArticleX[] = allBlogCollections.slice(1)

let tagCollection : string[] = [];
allBlogCollections.map(article => tagCollection.concat(article.tags))

---
<MainLayout title='YaBlog'>
  <div class="grid grid-cols-1 gap-5 lg:grid-cols-2">
    <div>
      <h1 class="text-5xl font-bold mt-4 mb-8 leading-tight xl:text-6xl">
        Articles, Stories & Tutorials for Tech People
      </h1>
      <SearchForm/>
    </div>
    <!-- Most Recent Article -->
    <MostRecentArticle article={mostRecentArticle}/>
  </div>
      <!-- Main Grid -->
  <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
    {otherArticles.slice(0,HOMEPAGE_ARTICLE_LIMIT).map(article => (
      <div class="max-w-md mx-auto mt-10">
      <div class="bg-white rounded-lg overflow-hidden shadow-lg">
        <a href={"/articles/"+article.slug}>
          <img
            src={article.imageUrl}
            alt="Article Image"
            class="w-full h-48 object-cover hover:opacity-75 transition duration-300 ease-in-out"
          />
        </a>
        <div class="p-6">
          <h2 class="text-2xl font-semibold mb-2">
            <a href={"/articles/"+article.slug}> {article.title} </a>
          </h2>
          <p class="text-gray-600 text-sm mb-4">{formatDate(article.pubDate)}</p>
          <Tags tags={article.tags}/>
        </div>
      </div>
      </div>
    ))}
  </div>


</MainLayout>
      <!-- Top Grid -->

================
File: src/pages/register.astro
================
---
import Layout from "../layouts/main.astro";
---

<Layout title="Register">
    <div class="max-w-md mx-auto mt-8 p-6 bg-white rounded-lg shadow-md">
        <h1 class="text-2xl font-bold mb-4 text-gray-800">Register</h1>
        <p class="mb-6 text-gray-600">
          Already have an account? 
          <a href="/signin" class="text-blue-600 hover:text-blue-800 underline">Sign in</a>
        </p>
        <form action="/api/auth/register" method="post" class="space-y-4">
          <div>
            <label for="email" class="block mb-1 font-medium text-gray-700">Email</label>
            <input type="email" name="email" id="email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>
          <div>
            <label for="password" class="block mb-1 font-medium text-gray-700">Password</label>
            <input type="password" name="password" id="password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>
          <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            Register
          </button>
        </form>
      </div>
</Layout>

================
File: src/pages/signin.astro
================
---
import Layout from "../layouts/main.astro";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (accessToken && refreshToken) {
  return redirect("/");
}
---

<Layout title="Sign in">
    <div class="max-w-md mx-auto mt-8 p-6 bg-white rounded-lg shadow-md">
        <h1 class="text-2xl font-bold mb-4 text-gray-800">Sign in</h1>
        <p class="mb-6 text-gray-600">
          New here? 
          <a href="/register" class="text-blue-600 hover:text-blue-800 underline">Create an account</a>
        </p>
        <form action="/api/auth/signin" method="post" class="space-y-4">
          <div>
            <label for="email" class="block mb-1 font-medium text-gray-700">Email</label>
            <input type="email" name="email" id="email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>
          <div>
            <label for="password" class="block mb-1 font-medium text-gray-700">Password</label>
            <input type="password" name="password" id="password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>
          <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            Login
          </button>
        </form>
      </div>
</Layout>

================
File: src/constants.ts
================
export const SITE_TITLE = 'YaBlog';
export const SITE_DESCRIPTION = 'Random Gibberish'
export const HOMEPAGE_ARTICLE_LIMIT = 6
export const ARTICLES_PER_PAGE = 6
export const TESTIMONIAL = "The number one place to catch up on latest tech advancements"

================
File: src/env.d.ts
================
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />

================
File: src/utils.ts
================
import { createClient } from "@supabase/supabase-js";
import 'dotenv/config'
import gm from 'gray-matter'
import {remark} from 'remark'
import html from 'remark-html'

function formatDate(date: Date) : string {
    const options: Intl.DateTimeFormatOptions = 
    {   year : 'numeric', 
        month: 'long', 
        day: 'numeric'
    }
    return new Date(date).toLocaleDateString(undefined,options);
}

function capitalize(str : string) : string {
    if(typeof str != 'string' || str.length == 0)
        return str

    return str.charAt(0).toUpperCase() + str.slice(1);
}

type ArticleX = {
    id: number
    html: string,
    slug: string,
    title: string,
    imageUrl: string,
    author: string,
    pubDate: Date,
    tags: string[],
}

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_KEY


if(supabaseKey == undefined || supabaseUrl == undefined){
    throw new Error("Undefined supabase url or key")
}

const supabase = createClient(supabaseUrl, supabaseKey)


async function getArticles() : Promise<ArticleX[]> {

    let { data: articles, error } = await supabase
    .from('article')
    .select('*')

    let dbTexts : any[] = articles!

    let dbArticles : ArticleX[] = [];

    console.log("Article count" + articles?.length)
    dbTexts?.forEach(async (text) => {
        
        const matterresult = gm(text.text);
        const processedContent = await remark().use(html).process(matterresult.content)

        const contentHtml = processedContent.toString();

        //console.table(processedContent)
        dbArticles.push({
            id:text.id,
            html: contentHtml,
            title: matterresult.data.title,
            imageUrl: text.imageUrl,
            slug: matterresult.data.slug,
            pubDate: matterresult.data.pubDate,
            tags: matterresult.data.tags,
            author: matterresult.data.author
        })
    })
    return dbArticles;
}

export { formatDate, capitalize, getArticles };
export type { ArticleX };

================
File: .gitignore
================
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

# jetbrains setting folder
.idea/

================
File: astro.config.mjs
================
import { defineConfig } from 'astro/config';

import vercel from "@astrojs/vercel/serverless";

// https://astro.build/config
export default defineConfig({
  output: 'server',
  adapter: vercel()
});

================
File: package.json
================
{
  "name": "",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.7.0",
    "@astrojs/tailwind": "^5.1.0",
    "@astrojs/vercel": "^7.7.0",
    "@supabase/supabase-js": "^2.43.4",
    "astro": "^4.10.1",
    "dotenv": "^16.4.5",
    "gray-matter": "^4.0.3",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.4.5"
  }
}

================
File: README.md
================
# Astro Starter Kit: Minimal

```sh
npm create astro@latest -- --template minimal
```

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/minimal)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/minimal)
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/minimal/devcontainer.json)

> 🧑‍🚀 **Seasoned astronaut?** Delete this file. Have fun!

## 🚀 Project Structure

Inside of your Astro project, you'll see the following folders and files:

```text
/
├── public/
├── src/
│   └── pages/
│       └── index.astro
└── package.json
```

Astro looks for `.astro` or `.md` files in the `src/pages/` directory. Each page is exposed as a route based on its file name.

There's nothing special about `src/components/`, but that's where we like to put any Astro/React/Vue/Svelte/Preact components.

Any static assets, like images, can be placed in the `public/` directory.

## 🧞 Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:4321`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

## 👀 Want to learn more?

Feel free to check [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).

================
File: tsconfig.json
================
{
  "extends": "astro/tsconfigs/strict"
}
